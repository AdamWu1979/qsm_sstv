Bootstrap: docker
From: ubuntu:xenial

# using fsl 5.0.9

#########
%setup
#########
#copy nipype qsm pipeline
mkdir ${SINGULARITY_ROOTFS}/code/

cp *.py ${SINGULARITY_ROOTFS}/code/
cp requirements.txt ${SINGULARITY_ROOTFS}/code/

#########
%post
#########
export DEBIAN_FRONTEND=noninteractive

apt-get update
apt-get install -y --no-install-recommends \
sudo \
wget \
apt-utils \
curl \
git \
dos2unix \
tree \
zip \
unzip \
make \
cmake \
bzip2 \
build-essential \
libtool \
autotools-dev \
automake \
autoconf \
tzdata \
git \
unzip \
ca-certificates \
python3 \
python3-dev \
python3-pip

#=============================================
#install fsl
#=============================================
echo "America/New_York" | sudo tee /etc/timezone && sudo dpkg-reconfigure --frontend noninteractive tzdata
wget -O- http://neuro.debian.net/lists/trusty.de-md.full | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list
#sudo apt-key adv --recv-keys --keyserver pgp.mit.edu 2649A5A9
apt-key adv --recv-keys --keyserver hkp://ha.pool.sks-keyservers.net 0xA5D32F012649A5A9
sudo apt-get update
sudo apt-get install -y fsl=5.0.9-5~nd14.04+1
#=============================================

#=============================================
#install pipeline's python dependencies
#=============================================
python3 -m pip install --upgrade pip
python3 -m pip install numpy==1.16.2 setuptools>=40.8.0
python3 -m pip install -r /code/requirements.txt
#=============================================

#=============================================
#install mcr for matlab qsm code
#=============================================
export MATLAB_VERSION=R2016b
mkdir /opt/mcr_install && \
    mkdir /opt/mcr && \
    wget -P /opt/mcr_install https://ssd.mathworks.com/supportfiles/downloads/${MATLAB_VERSION}/deployment_files/${MATLAB_VERSION}/installers/glnxa64/MCR_${MATLAB_VERSION}_glnxa64_installer.zip && \
    unzip -q /opt/mcr_install/MCR_${MATLAB_VERSION}_glnxa64_installer.zip -d /opt/mcr_install && \
    /opt/mcr_install/install -destinationFolder /opt/mcr -agreeToLicense yes -mode silent && \
    rm -rf /opt/mcr_install /tmp/*
#=============================================

#make entry point executable
chmod -R +x /code

#########
%files
#########
#initially copied the .py files in this section.
#however, chmod can't run in environment section, it has to run in the post section
#since file copy must happen before post, these copies are now done in setup
#./*.py /code/

#########
%environment
#########
#tries to chmod when running container, but permission denied
#chmod must be done in post section
#chmod -R +x /code 

#skip all interactive steps
#export DEBIAN_FRONTEND=noninteractive

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH
export PATH=/opt/anaconda2/bin/:$PATH

#fsl
export FSLDIR=/usr/share/fsl/5.0
export POSSUMDIR=$FSLDIR
export PATH=/usr/lib/fsl/5.0:$PATH
export FSLOUTPUTTYPE=NIFTI_GZ
export FSLMULTIFILEQUIT=TRUE
export FSLTCLSH=/usr/bin/tclsh
export FSLWISH=/usr/bin/wish
export FSLBROWSER=/etc/alternatives/x-www-browser
export LD_LIBRARY_PATH=/usr/lib/fsl/5.0

#mcr
#export MCR_VERSION=v91
#export LD_LIBRARY_PATH=/opt/mcr/${MCR_VERSION}/runtime/glnxa64:/opt/mcr/${MCR_VERSION}/bin/glnxa64:/opt/mcr/${MCR_VERSION}/sys/os/glnxa64:/opt/mcr/${MCR_VERSION}/sys/opengl/lib/glnxa64:${LD_LIBRARY_PATH}
export=MCR_INHIBIT_CTF_LOCK=1


#########
%runscript
#########
/code/run.py "$@"

